###############################################################################
# description: Enterprise Server Start Stop Restart
# processname: tomee
# chkconfig: 234 20 80
###############################################################################
#!/bin/bash

###############################################################################
#  Check for a Pre-Shutdown Command
###############################################################################
<% if node['enterprise_server'].key?('pre_shutdown_command') && !node['enterprise_server']['pre_shutdown_command'].empty? %>
PRE_SHUTDOWN_COMMAND="<%= node['enterprise_server']['pre_shutdown_command'].gsub(/\r\n?/,"\n") %>"
<% else %>
PRE_SHUTDOWN_COMMAND=
<% end %>
<% if node['enterprise_server'].key?('time_to_wait_before_shutdown') && !node['enterprise_server']['time_to_wait_before_shutdown'].empty?%>
TIME_TO_WAIT="<%= node['enterprise_server']['time_to_wait_before_shutdown'] %>"
<% else %>
TIME_TO_WAIT=
<% end %>

###############################################################################
#  Check for a Post-Shutdown Command
###############################################################################
<% if node['enterprise_server'].key?('post_shutdown_command') && !node['enterprise_server']['post_shutdown_command'].empty? %>
POST_SHUTDOWN_COMMAND="<%= node['enterprise_server']['post_shutdown_command'].gsub(/\r\n?/,"\n") %>"
<% else %>
POST_SHUTDOWN_COMMAND=
<% end %>

###############################################################################
#  Check for a Pre-Startup Command
###############################################################################
<% if node['enterprise_server'].key?('pre_startup_command') && !node['enterprise_server']['pre_startup_command'].empty? %>
PRE_STARTUP_COMMAND="<%= node['enterprise_server']['pre_startup_command'].gsub(/\r\n?/,"\n") %>"
<% else %>
PRE_STARTUP_COMMAND=
<% end %>

###############################################################################
#  Check for a Post-Startup Command
###############################################################################
<% if node['enterprise_server'].key?('post_startup_command') && !node['enterprise_server']['post_startup_command'].empty? %>
POST_STARTUP_COMMAND="<%= node['enterprise_server']['post_startup_command'].gsub(/\r\n?/,"\n") %>"
<% else %>
POST_STARTUP_COMMAND=
<% end %>
<% if node['enterprise_server'].key?('polling_frequency_post_startup_check') && !node['enterprise_server']['polling_frequency_post_startup_check'].empty? %>
TIME_BETWEEN_APP_START_CHECK="<%= node['enterprise_server']['polling_frequency_post_startup_check'] %>"
<% else %>
TIME_BETWEEN_APP_START_CHECK=1
<% end %>
<% if node['enterprise_server'].key?('max_number_of_retries_for_post_startup_check') && !node['enterprise_server']['max_number_of_retries_for_post_startup_check'].empty? %>
NUMBER_OF_TIMES_TO_CHECK_IF_APP_STARTED="<%= node['enterprise_server']['max_number_of_retries_for_post_startup_check'] %>"
<% else %>
NUMBER_OF_TIMES_TO_CHECK_IF_APP_STARTED=10
<% end %>

###############################################################################
#  Gather User and Process Info for Commands
###############################################################################
<% if node['enterprise_server'].key?('server_log_path') && !node['enterprise_server']['server_log_path'].empty? %>
LOG_FILES_PATH="<%= node['enterprise_server']['server_log_path'] %>"
<% else %>
LOG_FILES_PATH="/opt/enterprise-server/logs"
<% end %>

TOMCAT_SERVICE_NAME="enterprise-server"
SU="sudo -u"
TOMCAT_USER="<%= node['enterprise_server']['global']['server_user'] %>"
TOMCAT_BASE_DIR="<%= node['enterprise_server']['config_dir'] %>"
CATALINA_PID="<%= node['enterprise_server']['config_dir'] %>/enterprise-server.pid"
STOP_TIMEOUT="<%= node['enterprise_server']['stop_time'] %>"
SHUTDOWN_COMMAND="$SU $TOMCAT_USER $TOMCAT_BASE_DIR/bin/shutdown.sh"
START_COMMAND="$SU $TOMCAT_USER $TOMCAT_BASE_DIR/bin/startup.sh"

###############################################################################
#   get_tomcat_pid Method: Used to find the PID number of the Tomcat process
#     if running
###############################################################################
pid=""
function get_tomcat_pid() {
   pid=$(pgrep -f "org.apache.catalina.startup.Bootstrap")
   return $pid
}

###############################################################################
#   stop_tomcat Function: Used to stop the Tomcat process
#   1 - See if there is an existing PID number. If there is, exit the script.
#   2 - Do any pre-shutdown command and wait time for catalina startup.
#   3 - Run the shutdown command. Then check for a PID number.
#   4 - If PID is gone, remove /var/lock/subsys/$TOMCAT_SERVICE_NAME. If not,
#       kill the PID and then remove /var/lock/subsys/$TOMCAT_SERVICE_NAME.
###############################################################################
function stop_tomcat(){
  #=1=#
  fix_pid
  if [ $? -eq 1 ] ; then
    exit 1
  fi

  #=2=#
  echo "Stopping tomcat using $SHUTDOWN_COMMAND"
  if [ -n "$PRE_SHUTDOWN_COMMAND" ];then
    echo "Executing the PreShutdownHook $PRE_SHUTDOWN_COMMAND"
    eval "$PRE_SHUTDOWN_COMMAND"
    if [ -n "$TIME_TO_WAIT" ];  then
      get_tomcat_pid
      if [ -n "$pid" ]; then
        echo "Sleeping for  $TIME_TO_WAIT seconds."
        sleep "$TIME_TO_WAIT"
      else
        echo "Enterprise Server is not running. Skipping sleep."
      fi
    else
      echo "No time to wait before shutdown configured. Stopping catalina."
    fi
  else
    echo "No Pre-Shutdown Command configured."
  fi

  #=3=#
  eval "$SHUTDOWN_COMMAND $STOP_TIMEOUT"
  get_tomcat_pid

  #=4=#
  if [ -n "$pid" ]; then
    echo "Enterprise Server failed to shut down , forcing the tomcat to shutdown"
    eval "$SHUTDOWN_COMMAND -force"
    get_tomcat_pid
    if [ -n "$pid" ]; then
      kill -9 "$pid"
      rm -f "$CATALINA_PID"
      sleep 5
      get_tomcat_pid
      if [ -n "$pid" ] ; then
        echo "Could not stop tomcat."
      else
        rm -f  "/var/lock/subsys/$TOMCAT_SERVICE_NAME"
        echo "Enterprise Server stopped"
      fi
    else
      rm -f  "/var/lock/subsys/$TOMCAT_SERVICE_NAME"
      echo "Enterprise Server stopped"
    fi
  else
    rm -f  "/var/lock/subsys/$TOMCAT_SERVICE_NAME"
    echo "Enterprise Server stopped."
  fi
}

###############################################################################
#   fix_pid Function: Used to make sure that the CATALINA_PID file matches the
#     PID number of the running Enterprise Server fuction
###############################################################################
function fix_pid(){
  get_tomcat_pid
  if [ -f "$CATALINA_PID" ]; then
    PID_TOMCAT=$(cat "$CATALINA_PID")
  fi
  if [ "$PID_TOMCAT" != "$pid" ]; then
    ps -p "$PID" >/dev/null 2>&1
    if [ $? -eq 0 ] ; then
      echo "Are there two Enterprise Server processes ? found one $TOMCAT_PID other one $PID? "
      exit 1
    else
      if [ -n $pid ];then
        echo "$pid" > "$CATALINA_PID"
        echo "PID file fixed from $PID_TOMCAT to $pid "
      fi
    fi
  fi
}


###############################################################################
#   start_tomcat Function: Used to start the Tomcat process
#   1 - See if there is a running Tomcat process with a PID number. If there
#       is, exit the script.
#   2 - Run the START_COMMAND and create the service file if successful.
#   3 - Run the post-startup command if one was configured.
#   4 - End script and throw error if post-startup command fails.
#   5 -
###############################################################################
function start_tomcat(){
  echo "Starting Enterprise Server."

  #=1=#
  fix_pid
  if [ $? -eq 1 ] ; then
  exit 1
  fi

  #=2=#
  eval "$START_COMMAND"
  sleep 2
  status
  if [ $? != 0 ]; then
    exit 1
  else
    touch "/var/lock/subsys/$TOMCAT_SERVICE_NAME"
  fi

  #=3=#
  if [ -s "$POST_STARTUP_COMMAND_CONTENTS" ];then
    if [ -n "$NUMBER_OF_TIMES_TO_CHECK_IF_APP_STARTED" ];  then
      echo "Executing post start up command every $TIME_BETWEEN_APP_START_CHECK second for $NUMBER_OF_TIMES_TO_CHECK_IF_APP_STARTED times."
      for (( i = 1; i <= NUMBER_OF_TIMES_TO_CHECK_IF_APP_STARTED; i++ )); do
      #executing post startup script.
      eval "$POST_STARTUP_COMMAND"
      STATUS_OF_POST_START_UP_COMMAND=$?
      if [ $STATUS_OF_POST_START_UP_COMMAND -eq 1 ]; then
        sleep $TIME_BETWEEN_APP_START_CHECK
        echo "PostStartUpCommand failed;retrying  $i of $NUMBER_OF_TIMES_TO_CHECK_IF_APP_STARTED "
        continue
      else
        echo "PostStartUpCommand succeeded! "
        break
      fi
      done
    else
      echo "Skipping POST_STARTUP_COMMAND as NUMBER_OF_TIMES_TO_CHECK_IF_APP_STARTED not configured"
    fi
  else
    STATUS_OF_POST_START_UP_COMMAND=0
    echo "No PostStartUpCommand configured, Skipping it. "
  fi

  #=4=#
  if [ $STATUS_OF_POST_START_UP_COMMAND -eq 1 ]; then
    echo " POST_STARTUP_COMMAND failed ; stopping tomcat"
    SKIP_PRE_SHUTDOWN=1
    stop_tomcat
    exit 1
  fi

}

###############################################################################
#   status Function: Used to see if the Tomcat process is running or not based
#       on the existance of a PID number.
###############################################################################
function status(){
  get_tomcat_pid
  if [ -n "$pid" ];then
    echo "Enterprise Server running as :$(ps  --no-headers -o cmd $pid|tail ) "
    echo "Enterprise Server pid: $pid"
  else
    echo "Enterprise Server is not running"
    exit 1
  fi
}

###############################################################################
#   Read in command for init.d script and call the necessary methods accordingly.
###############################################################################
case $1 in
  status)
    status
    ;;
  start)
    start_tomcat
    ;;
  stop)
    stop_tomcat
    ;;
  restart)
    stop_tomcat
    start_tomcat
    ;;
esac

###############################################################################
#   End of Script
###############################################################################
exit 0
