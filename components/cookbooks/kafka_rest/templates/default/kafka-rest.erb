# This file is generated by chef
# Any manual changes will be overwritten!
# To make changes, edit the template in the kakfa_rest_proxy cookbook

#!/bin/sh
# Auto-generated by Chef, do not edit!
### BEGIN INIT INFO
# Provides: kafka-rest
# Short-Description: kafka-rest server
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
# Required-Start:
# Required-Stop:
# Should-Start:
# Should-Stop:
### END INIT INFO

USER=<%= node['kafka_rest'][:user] %>
SLEEP_TIME=5
CURRENT_WAIT=0
TIMEOUT=60
BIN_DIR=/usr/bin
NAME=kafka-rest
SCRIPT=kafka-rest
CLASS=kafkarest.Main\|kafkarest.KafkaRestMain

# We have to pipe STDOUT here otherwise it will print logs when running script
START_SERVER_CMD="$BIN_DIR/$SCRIPT-start /etc/kafka-rest/kafka-rest.properties  &> <%= node['kafka_rest'][:log_dir] %>/$NAME-service.out &"

# We have to pipe STDOUT here otherwise it will print logs when running script
STOP_SERVER_CMD="$BIN_DIR/$SCRIPT-stop &> <%= node['kafka_rest'][:log_dir] %>/$NAME-service.out"

# Application environment variables
#export DAEMON_MODE="true"
export JMX_PORT=<%= node['kafka_rest'][:jmx_port] %>

start() {
  findPid

  if [ "" = "$FOUND_PID" ]; then
    su --shell=/bin/sh $USER -c "$START_SERVER_CMD"

    if [ $? -ne 0 ]; then
      echo "Error starting $NAME"
      exit 1
    fi

    echo "$NAME successfully started"

  else
    echo "$NAME is already running"
  fi
}

stop() {
  findPid
  if [ "" = "$FOUND_PID" ]; then
    echo "$NAME is not running"
  else
    while [ -n "$FOUND_PID" ];
    do
      echo "Attempting to shutdown $NAME..."
       su --shell=/bin/sh $USER -c "$STOP_SERVER_CMD"

      if [ $? -ne 0 ]; then
        echo "Error stopping $NAME"
        exit 1
      fi

      sleep $SLEEP_TIME
      CURRENT_WAIT=$(($CURRENT_WAIT+$SLEEP_TIME))

      if [ $CURRENT_WAIT -gt $TIMEOUT ]; then
        echo "Timed out waiting for $NAME to stop"
        exit 1
      fi

      findPid
    done
  fi

}

status() {
  findPid
  if [ -z "$FOUND_PID" ]; then
    echo "INFO: $NAME is not running"
    exit 1
  else
    echo "INFO: $NAME is running : $FOUND_PID"
    exit 0
  fi
}

findPid() {
  FOUND_PID=`pgrep -u $USER -f $CLASS`
}

case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  restart)
    stop
    start
  ;;
  status)
    status
  ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
esac

exit 0