#!/bin/bash
# chkconfig: 2345 20 90
# description: keysync
### BEGIN INIT INFO
# Provides: keysync
# Required-Start: network
# Required-Stop: network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Description: Start the program
### END INIT INFO

START_CMD="/opt/oneops/keywhiz/keysync/keysync --config=/opt/oneops/keywhiz/keysync/config.yaml > /var/log/keysync/keysync.log 2>&1 &"
USER="root"
NAME="keysync"
PGREP_STRING="/opt/oneops/keywhiz/keysync/keysync"
SECRETS_MOUNT=<%= @secrets_dir %>

CUR_USER=`whoami`

# Creates tmpfs mount if not exists.
mount_tmpfs() {
  fs_type=$(stat  --format="%T" --file-system "$SECRETS_MOUNT")
  ret=$?

  if ! [[ "$ret" == "0" && "$fs_type" == "tmpfs" ]]; then
      log_success_msg "Mount the tmpfs..."
      opts="uid=root,gid=root,nodev,nosuid,noexec,size=100M,nr_inodes=100k,mode=0755"
      mount -t tmpfs tmpfs "$SECRETS_MOUNT" -o "$opts"
      if [ $? -eq 0 ]; then
         log_success_msg "Successfully mounted tmpfs on $SECRETS_MOUNT"
      else
        log_failure_msg "Mount tmpfs failed. Exiting."
        exit -1
      fi
  else
      log_success_msg "$SECRETS_MOUNT tmpfs mount exists."
  fi
}

killproc() {
  pkill -u $USER -f $PGREP_STRING
}

start_daemon() {
  eval "$*"
}

log_success_msg() {
  echo "$*"
  logger "$_"
}

log_failure_msg() {
  echo "$*"
  logger "$_"
}

check_proc() {
  pgrep -u $USER -f $PGREP_STRING >/dev/null
}

start_script() {
  [ -d /var/log/$NAME ] || (mkdir /var/log/$NAME )

  if [ "${CUR_USER}" != "root" ] ; then
    log_failure_msg "$NAME can only be started as 'root'."
    exit -1
  fi

  mount_tmpfs
  check_proc

  if [ $? -eq 0 ]; then
    log_success_msg "$NAME is already running."
    exit 0
  fi

   # make go now 
    start_daemon /bin/su $USER -c \"$START_CMD\"

  # Sleep for a while to see if anything cries
  sleep 5
  check_proc

  if [ $? -eq 0 ]; then
    log_success_msg "Started $NAME."
  else
    log_failure_msg "Error starting $NAME."
    exit -1
  fi
}

stop_script() {
  if [ "${CUR_USER}" != "root" ] ; then
    log_failure_msg "You do not have permission to stop $NAME."
    exit -1
  fi

  check_proc
  if [ $? -eq 0 ]; then
    killproc -p $PID_FILE >/dev/null

    # Make sure it's dead before we return
    until [ $? -ne 0 ]; do
      sleep 1
      check_proc
    done

    check_proc
    if [ $? -eq 0 ]; then
      log_failure_msg "Error stopping $NAME."
      exit -1
    else
      log_success_msg "Stopped $NAME."
    fi
  else
    log_failure_msg "$NAME is not running or you don't have permission to stop it"
  fi
}

check_status() {
  check_proc
  if [ $? -eq 0 ]; then
    log_success_msg "$NAME is running."
  else
    log_failure_msg "$NAME is stopped."
    exit -1
  fi
}

case "$1" in
  start)
    start_script
    ;;
  stop)
    stop_script
    ;;
  restart)
    stop_script
    start_script
    ;;
  status)
    check_status
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
esac

exit 0

